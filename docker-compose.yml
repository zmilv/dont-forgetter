version: "3.8"

services:
  django-migrations:
    profiles:
      - ci
    build: .
    container_name: django-migrations
    working_dir: /usr/src/app/backend
    command: >
      sh -c "python manage.py makemigrations core &&
             python manage.py makemigrations users &&
             python manage.py migrate"
    volumes:
      - .:/usr/src/app
    env_file:
      - env_vars/.env.dev
    depends_on:
      - redis
      - pgdb

  django:
    build: .
    restart: always
    container_name: django
    working_dir: /usr/src/app/backend
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/usr/src/app
      - logs:/usr/src/app/logs
    ports:
      - "8000:8000"
    env_file:
      - env_vars/.env.dev
    depends_on:
      - redis
      - pgdb

  pgdb:
    image: postgres:15.2-alpine
    container_name: pgdb
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - env_vars/.env.dev

  celery:
    build: .
    container_name: celery
    working_dir: /usr/src/app/backend
    command: celery -A backend worker -l INFO
    volumes:
      - .:/usr/src/app
    env_file:
      - env_vars/.env.dev
    depends_on:
      - django
      - redis
      - pgdb

  celery-beat:
    build: .
    container_name: celery-beat
    working_dir: /usr/src/app/backend
    command: celery -A backend beat -s backend/celerybeat/celerybeat-schedule
    volumes:
      - .:/usr/src/app
    env_file:
      - env_vars/.env.dev
    depends_on:
      - celery

  redis:
    image: "redis:alpine"
    container_name: redis

  test:
    profiles:
      - ci
    build: .
    container_name: test
    working_dir: /usr/src/app/backend
    command: pytest
    volumes:
      - .:/usr/src/app
    depends_on:
      - django
      - pgdb
      - redis
    env_file:
      - env_vars/.env.dev

volumes:
  logs: {}
  postgres_data:
